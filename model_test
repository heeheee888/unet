import os
import numpy as np
import time
import datetime
import torch
import torchvision
from torch import optim
from torch.autograd import Variable
import torch.nn.functional as F
# from unet-model import UNet
import csv
from torchvision import datasets, transforms, models
from torch.utils.data import Dataset, DataLoader
from torchvision.datasets import ImageFolder
from torch import nn
from matplotlib import pyplot as plt
import numpy as np

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

transforms= transforms.Compose([transforms.Resize(224),
                                transforms.CenterCrop(224),
                                transforms.Grayscale(num_output_channels=1),
                                transforms.ToTensor(),
                                #transforms.Normalize([0.5,0.5,0.5],[0.5,0.5,0.5])
                                #transforms.Normalize([0.485, 0.456, 0.406], [0.228, 0.224, 0.225])
                                ])

class SegmentationDataset(data.Dataset):
    def __init__(self, dir_images, dir_masks, transform=None, extensions=None):
        
        super().__init__()
        self.dir_images = dir_images
        self.dir_masks = dir_masks
        self.transform = transform
        self.extensions = extensions if extensions else IMG_EXTENSIONS
        self.extensions = tuple(x.lower() for x in self.extensions)

        self.img_names, self.mask_names = self.make_dataset()

    def __getitem__(self, index):
        img_name = self.img_names[index]
        mask_name = self.mask_names[index]
        img = default_loader(os.path.join(self.dir_images, img_name))
        mask = default_loader(os.path.join(self.dir_masks, mask_name))
        assert img.size == mask.size #아니면 assertionerror 발생

        # if not self.transform:
        #     return img, mask

        img = self.transform(img)
        mask = self.transform(mask)
        return img, mask

    def __len__(self):
        return len(self.img_names)
    
    # def apply_transform(self):
    #   img, mask = self.transform(img, mask)
    #   return img, mask
    
    
    def make_dataset(self):
        img_names = sorted(os.listdir(self.dir_images))
        mask_names = sorted(os.listdir(self.dir_masks))

        img_names = [
            x for x in img_names if has_file_allowed_extension(x, self.extensions)
        ]
        mask_names = [
            x for x in mask_names if has_file_allowed_extension(x, self.extensions)
        ]

        assert len(img_names) == len(mask_names)


        return img_names, mask_names


# print(os.listdir('../gdrive/MyDrive/input_00/image/0'))


dataset = SegmentationDataset(
    dir_images = '../gdrive/MyDrive/input_00/image/0',
    dir_masks = '../gdrive/MyDrive/input_00/mask/0',
    transform=transforms
)



trainloader = DataLoader(dataset, batch_size = 1, shuffle=False)
PATH = '/gdrive/MyDrive/test_image_unet3+/epoch++48.tar'


test_dataset = ImageFolder(root ='/gdrive/My Drive/test_0',transform=transforms)
testloader = DataLoader(dataset=test_dataset, batch_size =1, shuffle= True)

model = UNet_3Plus()
model.load_state_dict(torch.load(PATH))
model.to(device)
# epochs =10
# best_score =0.
# test_losses=[]

for num, (images, label) in enumerate(testloader):
    model.eval()
    # GT =images[0].unsqueeze(0).to(device)
    images = images[0].unsqueeze(0).to(device)
    output = model(images).unsqueeze(0).to(device)
    temp = output.cpu().detach().numpy() #빨,노,회 3개 색깔로 구성
    img = np.zeros((224,224,3))
    for ch in range(3):
      img[:, :,ch] = temp[0, 0]
    # print(img.max())
    plt.imshow(img)
    plt.show()
    # plt.imsplt.imshow(np.transpose(output[0].cpu().detach().numpy(),(1,2,0)))
    # plt.show()
    plt.imsave('/gdrive/MyDrive/test_image_unet3+/test{}.png'.format(num), img)
    # plt.savefig('/gdrive/My Drive/test{}.png',format(num))
